type User
  @model(queries: { get: "getUser" }, subscriptions: null)
  @auth(
    rules: [
      {
        allow: private
        operations: [create, update, delete, read]
        provider: iam
      }
    ]
  ) {
  id: ID!
  twitterId: String!
  userName: String!
  displayName: String!
  iconUrl: AWSURL!
  isPrivate: Boolean
  OAuthToken: String!
  OAuthSecret: String!
  note: [Memo] @connection(name: "UserNote", sortField: "createdAt")
  subUser: [SubUser] @connection(name: "SubUsers")
}

type SubUser
  @model(subscriptions: null)
  @auth(
    rules: [
      {
        allow: private
        operations: [create, update, delete, read]
        provider: iam
      }
    ]
  ) {
  id: ID!
  userName: String!
  displayName: String!
  iconUrl: AWSURL!
  user: User! @connection(name: "SubUsers")
}

type Memo
  @model
  @auth(
    rules: [
      {
        allow: private
        operations: [create, update, delete, read]
        provider: iam
      }
    ]
  )
  @key(fields: ["id", "createdAt"]) {
  id: ID!
  statusId: String!
  user: User! @connection(name: "UserNote", sortField: "createdAt")
  tags: [MemoTag] @connection(name: "MemoTags")
  createdAt: AWSTimestamp!
}

type MemoTag
  @model(queries: null, mutations: null, subscriptions: null)
  @auth(
    rules: [
      {
        allow: private
        operations: [create, update, delete, read]
        provider: iam
      }
    ]
  ) {
  id: ID!
  memo: Memo! @connection(name: "MemoTags")
  tag: Tag! @connection(name: "MemosTag")
}

type Tag
  @model
  @auth(
    rules: [
      {
        allow: private
        operations: [create, update, delete, read]
        provider: iam
      }
    ]
  )
  @key(fields: ["id", "name"]) {
  id: ID!
  name: String!
  memos: [MemoTag] @connection(name: "MemosTag")
}
